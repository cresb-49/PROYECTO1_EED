import com.carlos.proyecto1.Analizadores.Lexer.capasLexer;
import com.carlos.proyecto1.ED.*;
import com.carlos.proyecto1.Exepciones.*;
import com.carlos.proyecto1.Tokens.token;
import java_cup.runtime.Symbol;
class parserCapas;

parser code {:
        
    private Pila errores = new Pila();    
    private AVL arbolCapas = new AVL();
    
    public parserCapas(capasLexer lex){
        super(lex);
    }

    public void report_error(String message, Object info){
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info){
        System.out.println("reportfatal");
    }

    public void syntax_error(Symbol cur_token){
        token tok = ((token)cur_token.value);
        System.out.println("Parametro inesperado ["+tok.getLexeme()+"] Linea: "+tok.getLine()+" Columna: "+tok.getColumn());
        errores.push("Parametro inesperado ["+tok.getLexeme()+"] Linea: "+tok.getLine()+" Columna: "+tok.getColumn());
    }

    protected int error_sync_size() {
        return 1;
    }

    public Pila getErrores(){
        return errores;
    }

    public AVL getArbolCapas() {
        return arbolCapas;
    }

:}

terminal    NUM,COM,DOT_COM,L_A,L_C,COLOR;
non terminal s,sp,cont,cont2;

s   ::= NUM:e1 L_A cont:e2 L_C sp
    {:
        if(e2!=null){
            MatrizDispersa tmp = (MatrizDispersa)e2;
            String tag = ((token)e1).getLexeme();
            try {
                arbolCapas.agregar(new NodoArbol(tag, tmp));
            } catch (CloneNodeException ex) {
                System.out.println(ex.getMessage()+" ,Linea: "+((token)e1).getLine()+" Columna: "+((token)e1).getColumn());
                errores.push(String.valueOf(ex.getMessage()+" ,Linea: "+((token)e1).getLine()+" Columna: "+((token)e1).getColumn()));
            }
        }else{
            System.out.println("Errores previos en lectura de la matriz: "+((token)e1).getLexeme()+", Corrija e intente de nuevo, Linea: "+((token)e1).getLine()+" ,Columna: "+((token)e1).getColumn());
            errores.push("Errores previos en lectura de la matriz: "+((token)e1).getLexeme()+", Corrija e intente de nuevo, Linea: "+((token)e1).getLine()+" ,Columna: "+((token)e1).getColumn());
        }
    :}
    |   error
    ;

cont    ::= NUM:e1 COM NUM:e2 COM COLOR:e3 DOT_COM cont2:e4
        {:
            if(e4!=null){
                MatrizDispersa tmp = (MatrizDispersa)e4;
                try {
                    int x = Integer.parseInt(((token)e2).getLexeme());
                    int y = Integer.parseInt(((token)e1).getLexeme());
                    
                    tmp.agregarNodo(x, y, ((token)e3).getLexeme());

                    RESULT = e4;
                    
                } catch (InvalidIndexException | CloneNodeException | InvalidStructureException ex) {
                    System.out.println(ex.getMessage()+" ,Linea: "+((token)e1).getLine()+" Columna: "+((token)e1).getColumn());
                    errores.push(String.valueOf(ex.getMessage()+" ,Linea: "+((token)e1).getLine()+" Columna: "+((token)e1).getColumn()));
                }
            }
            
        :}
        |   error
        ;

cont2   ::= cont:e1
        {:
            RESULT = e1;
        :}
        |
        {:
            RESULT = new MatrizDispersa();
        :}
        ;

sp  ::= s
    |   
    ;