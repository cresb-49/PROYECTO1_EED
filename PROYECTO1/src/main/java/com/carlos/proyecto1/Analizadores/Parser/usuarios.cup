package com.carlos.proyecto1.Analizadores.Parser;
import com.carlos.proyecto1.Analizadores.Lexer.userLexer;
import com.carlos.proyecto1.ED.*;
import com.carlos.proyecto1.Tokens.token;
import com.carlos.proyecto1.Objetos.*;
import com.carlos.proyecto1.Exepciones.CloneNodeException;
import java_cup.runtime.Symbol;

class parserUsuario;

parser code {:
        
    private Pila errores = new Pila();    
    private AVL usuarios;
    private ListaDobleEnlazadaCircular listaCircularImagenes;
    private traducErrorParserUsuario traductorError;
    
    public parserUsuario(userLexer lex,ListaDobleEnlazadaCircular listaImagenes, AVL usuariosSistema){
        super(lex);
        this.listaCircularImagenes=listaImagenes;
        this.usuarios = usuariosSistema;
        this.traductorError = new traducErrorParserUsuario();
    }

    public void report_error(String message, Object info){
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info){
        System.out.println("reportfatal");
    }

    public void syntax_error(Symbol cur_token){
        token tok = (token) cur_token.value;
        String err = "Parametro inesperado \""+tok.getLexeme()+"\" se esperaba[";
        for (int i = 0; i < expected_token_ids().size(); i++) {
            if (!traductorError.tokenEsperado(expected_token_ids().get(i)).equals("")) {
                err = err + traductorError.tokenEsperado(expected_token_ids().get(i));
                if (i < (expected_token_ids().size() - 1)) {
                    err = err + " รณ ";
                }
            }
        }
        err = err +"] Linea: "+tok.getLine()+",Columna: "+tok.getColumn();
        System.out.println(err);
        errores.push(err);
    }

    protected int error_sync_size() {
        return 1;
    }

    public Pila getErrores(){
        return errores;
    }

    public AVL getUsuarios(){
        return usuarios;
    }

:}

terminal    USER,ID,D_DOT,COMA,DOT_COMA;
non terminal s,sp,cont,cont2,contenido;

s   ::= USER:e1 D_DOT contenido:e2 DOT_COMA sp
    {:
        if(e2!=null){
            Pila pilaTmp = (Pila)e2;
            token tok = (token)e1;
            if(pilaTmp.isEmpty()){
                System.out.println("Pila vacia");
                usuario nuevo = new usuario(tok.getLexeme(), new ListaDobleEnlazada());
                try {
                    usuarios.agregar(new NodoArbol(nuevo.getUser(),nuevo));
                } catch (CloneNodeException e) {
                    System.out.println(e.getMessage()+",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    errores.push(e.getMessage()+",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                }
            }else{
                System.out.println("Pila con datos");
                ListaDobleEnlazada imagenes = new ListaDobleEnlazada();
                Imagen tmp = null;
                while (!pilaTmp.isEmpty()) {                    
                    tmp = (Imagen)pilaTmp.pop();
                    try{
                        imagenes.agregar(new Nodo(tmp.getId(),tmp));
                    }catch(CloneNodeException e){
                        System.out.println(e.getMessage()+",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                        errores.push(e.getMessage()+",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    }
                    
                }
                usuario nuevo = new usuario(tok.getLexeme(), imagenes);
                try {
                    usuarios.agregar(new NodoArbol(nuevo.getUser(),nuevo));
                } catch (CloneNodeException e) {
                    System.out.println(e.getMessage()+",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    errores.push(e.getMessage()+",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                }
            }
        }
    :}
    |   error
    ;

sp  ::= s
    |
    ;

contenido ::=   cont:e1
            {:
                RESULT =e1;
            :}
            |   
            {:
                RESULT = new Pila();
            :}
            ;

cont    ::= ID:e1 cont2:e2
        {:
            if(e2!=null){
                Pila tmpPila = (Pila)e2;
                token tok = (token)e1;
                Nodo nodoTmp = listaCircularImagenes.buscar(tok.getLexeme());
                if(nodoTmp!=null){
                    Imagen imagenTmp = (Imagen)nodoTmp.getContenido();
                    if (tmpPila.buscar(imagenTmp.getId())==null) {
                        tmpPila.push(imagenTmp, imagenTmp.getId());
                        System.out.println("Agrege la imagen a la pila");
                    }else{
                        System.out.println("Ya habia asignado la imagen \""+tok.getLexeme()+"\",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                        errores.push("Ya habia asignado la imagen \""+tok.getLexeme()+"\",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    }
                }else{
                    System.out.println("No existe una imagen \""+tok.getLexeme()+"\",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    errores.push("No existe una imagen \""+tok.getLexeme()+"\",Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                }   
            }
            RESULT = e2;
        :}
        |   error
        ;

cont2   ::= COMA cont:e1
        {:
            RESULT = e1;
        :}
        |
        {:
            RESULT = new Pila();
        :}
        |   error
        ;