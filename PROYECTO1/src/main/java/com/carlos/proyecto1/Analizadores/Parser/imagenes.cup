package com.carlos.proyecto1.Analizadores.Parser;
import com.carlos.proyecto1.Analizadores.Lexer.imagenLexer;
import com.carlos.proyecto1.ED.*;
import com.carlos.proyecto1.Tokens.token;
import com.carlos.proyecto1.Objetos.*;
import com.carlos.proyecto1.Exepciones.CloneNodeException;

class parserImagenes;

parser code {:
        
    private Pila errores = new Pila();    
    private AVL arbolCapas = new AVL();
    private ListaDobleEnlazadaCircular listaCircularImagenes = new ListaDobleEnlazadaCircular();
    
    public parserImagenes(imagenLexer lex,AVL capas){
        super(lex);
        this.arbolCapas=capas;
    }

    public void report_error(String message, Object info){
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info){
        System.out.println("reportfatal");
    }
    /*
    public void syntax_error(Symbol cur_token){

    }*/

    protected int error_sync_size() {
        return 1;
    }

    public Pila getErrores(){
        return errores;
    }

    public ListaDobleEnlazadaCircular getImagenes(){
        return listaCircularImagenes;
    }

:}

terminal    NUM,COM,L_A,L_C;
non terminal s,sp,conte,cont,cont2;

s   ::= NUM:e1 L_A conte:e2 L_C sp
    {:
        if(e2!=null){
            Pila datos = (Pila)e2;
            token tok = (token)e1;
            if(!datos.isEmpty()){
                System.out.println("La pila tiene datos");
                ListaDobleEnlazada capas = new ListaDobleEnlazada();
                Capa tmp = null;
                while (!datos.isEmpty()) {                    
                    tmp = (Capa)datos.pop();
                    System.out.println(tmp.toString());
                    //capas.agregar(new Nodo(tmp.getId(),tmp));
                }       
                Imagen img =new Imagen(tok.getLexeme(), capas);
                System.out.println("Genere la lista de capas");
                    
            }else{
                System.out.println("La pila no tiene datos");


                Imagen img =new Imagen(tok.getLexeme(), new ListaDobleEnlazada());
                System.out.println("Genere la lista de capas");    
            }
        }
    :}
    |   error
    ;

sp  ::= s
    |   
    ;
conte   ::= cont:e1
        {:
            RESULT = e1;
        :}
        |
        {:
            RESULT = new Pila();
        :}
        ;

cont    ::= NUM:e1 cont2:e2
        {:
            if(e2!=null){
                token tok = ((token)e1);
                Pila datos = (Pila)e2;
                System.out.println("Capa solicitada: "+tok.getLexeme());
                Capa capa = (Capa)arbolCapas.buscarNodo(tok.getLexeme()).getContenido();
                if(capa==null){
                    System.out.println("No existe la capa \""+tok.getLexeme()+"\" ,Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    errores.push("No existe la capa \""+tok.getLexeme()+"\" ,Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                }else{
                    System.out.println(capa.toString());
                    if(datos.buscar(tok.getLexeme())==null){
                        datos.push(capa,capa.getId());
                        System.out.println("Ingrese la capa en la pila");
                    }else{
                        System.out.println("Ya habia asignado la capa \""+tok.getLexeme()+"\" ,Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                        errores.push("Ya habia asignado la capa \""+tok.getLexeme()+"\" ,Linea: "+tok.getLine()+" ,Columna: "+tok.getColumn());
                    }
                }
            }
            RESULT = e2;
        :}
        |   error
        ;

cont2   ::= COM cont:e1
        {:
            RESULT = e1;
        :}
        |
        {:
            RESULT = new Pila();
        :}
        |   error
        ;

