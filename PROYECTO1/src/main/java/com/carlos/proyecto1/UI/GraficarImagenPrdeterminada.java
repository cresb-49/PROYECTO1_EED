/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto1.UI;

import com.carlos.proyecto1.ED.ListaDobleEnlazada;
import com.carlos.proyecto1.ED.ListaDobleEnlazadaCircular;
import com.carlos.proyecto1.ED.MatrizDispersa;
import com.carlos.proyecto1.ED.Nodo;
import com.carlos.proyecto1.Exepciones.CloneNodeException;
import com.carlos.proyecto1.Exepciones.InvalidIndexException;
import com.carlos.proyecto1.Exepciones.InvalidStructureException;
import com.carlos.proyecto1.Exepciones.NullDataException;
import com.carlos.proyecto1.Graficacion.GraficarImagen;
import com.carlos.proyecto1.Graficacion.ejecutarGraphviz;
import com.carlos.proyecto1.Graficacion.generarDotFile;
import com.carlos.proyecto1.Objetos.Capa;
import com.carlos.proyecto1.Objetos.DatosPrograma;
import com.carlos.proyecto1.Objetos.Imagen;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author benjamin
 */
public class GraficarImagenPrdeterminada extends javax.swing.JInternalFrame {

    private String pathImg;
    private DatosPrograma datosP;
    private ejecutarGraphviz ejec;

    /**
     * Creates new form GraficarImagenPrdeterminada
     */
    public GraficarImagenPrdeterminada(DatosPrograma datosP) {
        initComponents();
        this.datosP = datosP;
        this.ejec = new ejecutarGraphviz();
        this.cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldPath = new javax.swing.JTextField();
        jComboImagenes = new javax.swing.JComboBox<>();
        btnMostrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelImagen = new javax.swing.JLabel();
        btnGenerarImagen = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jTextFieldPath.setEditable(false);

        btnMostrar.setText("Mostrar");
        btnMostrar.setEnabled(false);
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Selec. id de Imagen");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabelImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(jLabelImagen);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnGenerarImagen.setText("Generar Imagen");
        btnGenerarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarImagenActionPerformed(evt);
            }
        });

        jLabel3.setText("Ubicacion:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGenerarImagen)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(btnMostrar))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboImagenes, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGenerarImagen)
                        .addGap(18, 18, 18)
                        .addComponent(btnMostrar)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        // TODO add your handling code here:
        try {
            File file = new File(this.pathImg);
            Image icono = ImageIO.read(file);
            jLabelImagen.setIcon(new ImageIcon(icono));
            jLabelImagen.updateUI();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al mostrar la imagen:\n" + ex.getMessage());
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btnGenerarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarImagenActionPerformed
        // TODO add your handling code here:

        String id = jComboImagenes.getItemAt(jComboImagenes.getSelectedIndex());
        graficarImagen(id);
    }//GEN-LAST:event_btnGenerarImagenActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarImagen;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JComboBox<String> jComboImagenes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelImagen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables

    private void graficarImagen(String id) {
        Nodo tmp = datosP.getImagenes().buscar(id);
        Imagen tmpImagen = (Imagen) tmp.getContenido();
        GraficarImagen graficador = new GraficarImagen();
        generarDotFile gen = new generarDotFile();
        Capa tmpCapa = null;
        ListaDobleEnlazada listaCapas = tmpImagen.getCapas();

        if (listaCapas.isEmpty()) {

            try {
                String code = "digraph imagen{\n"
                        + "    image[shape=none, margin=0,label=<\n"
                        + "    <TABLE BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"15\">\n"
                        + "       <TR>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "       </TR>\n"
                        + "       <TR>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"##000000\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "       </TR>\n"
                        + "       <TR>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "       </TR>\n"
                        + "    </TABLE>>];\n"
                        + "}";
                gen.generarArchivo(code, "imagenPredeterminada");
                pathImg = ejec.ejecutar("imagenPredeterminada" + ".dot", "imagenPredeterminada" + ".png");
                this.mostarPath();
                this.btnMostrar.setEnabled(true);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            } catch (NullDataException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            }

        } else {
            Nodo tmpNodo = listaCapas.getRaiz();
            try {

                MatrizDispersa mt = ((Capa) tmpNodo.getContenido()).getContenido().obtenerCopia();

                while (tmpNodo != null) {
                    tmpCapa = (Capa) tmpNodo.getContenido();
                    mt.mergeMatriz(tmpCapa.getContenido());
                    tmpNodo = tmpNodo.getSiguiente();
                }

                String code = graficador.obtenerImagen(mt);
                gen.generarArchivo(code, "imagenPredeterminada");
                pathImg = ejec.ejecutar("imagenPredeterminada" + ".dot", "imagenPredeterminada" + ".png");
                this.mostarPath();
                this.btnMostrar.setEnabled(true);

            } catch (CloneNodeException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            } catch (InvalidStructureException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            } catch (InvalidIndexException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            } catch (NullDataException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            }
        }

    }

    private void mostarPath() {
        this.jTextFieldPath.setText(this.pathImg);
        JOptionPane.showMessageDialog(this, "Se genero con exito la imagen, puede copiar la ruta\n"
                + "o mostrar la imagen en el programa precionando el boton \"Mostrar\"");
        jLabelImagen.setIcon(null);
        jLabelImagen.updateUI();
    }

    private void cargarCombo() {
        this.jComboImagenes.removeAllItems();
        ListaDobleEnlazadaCircular listaImagenes = datosP.getImagenes();
        Imagen imgTmp = null;
        Nodo tmp = listaImagenes.getRaiz();
        do {            
            imgTmp = (Imagen)tmp.getContenido();
            this.jComboImagenes.addItem(imgTmp.getId());
            tmp = tmp.getSiguiente();
        } while (tmp!=listaImagenes.getRaiz());
    }
}
