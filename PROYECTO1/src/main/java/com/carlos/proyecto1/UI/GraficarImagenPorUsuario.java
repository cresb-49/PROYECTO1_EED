/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto1.UI;

import com.carlos.proyecto1.ED.ListaDobleEnlazada;
import com.carlos.proyecto1.ED.ListaDobleEnlazadaCircular;
import com.carlos.proyecto1.ED.MatrizDispersa;
import com.carlos.proyecto1.ED.Nodo;
import com.carlos.proyecto1.ED.NodoArbol;
import com.carlos.proyecto1.Exepciones.CloneNodeException;
import com.carlos.proyecto1.Exepciones.InvalidIndexException;
import com.carlos.proyecto1.Exepciones.InvalidStructureException;
import com.carlos.proyecto1.Exepciones.NullDataException;
import com.carlos.proyecto1.Graficacion.GraficarImagen;
import com.carlos.proyecto1.Graficacion.ejecutarGraphviz;
import com.carlos.proyecto1.Graficacion.generarDotFile;
import com.carlos.proyecto1.Objetos.Capa;
import com.carlos.proyecto1.Objetos.DatosPrograma;
import com.carlos.proyecto1.Objetos.Imagen;
import com.carlos.proyecto1.Objetos.usuario;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author benjamin
 */
public class GraficarImagenPorUsuario extends javax.swing.JInternalFrame {

    private String pathImg;
    private DatosPrograma dataP;
    private ejecutarGraphviz ejec;

    /**
     * Creates new form GraficarImagenPorUsuario
     */
    public GraficarImagenPorUsuario(DatosPrograma dataP) {
        initComponents();
        this.dataP = dataP;
        this.ejec = new ejecutarGraphviz();
        this.cargarComboUsuarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldPath = new javax.swing.JTextField();
        jComboUsuarios = new javax.swing.JComboBox<>();
        btnMostrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelImagen = new javax.swing.JLabel();
        btnGenerarImagen = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboImagenes = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Graficar Imagen Por Usuario");

        jTextFieldPath.setEditable(false);

        jComboUsuarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboUsuariosItemStateChanged(evt);
            }
        });
        jComboUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboUsuariosActionPerformed(evt);
            }
        });

        btnMostrar.setText("Mostrar");
        btnMostrar.setEnabled(false);
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione Usuario");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabelImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(jLabelImagen);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnGenerarImagen.setText("Generar Imagen");
        btnGenerarImagen.setEnabled(false);
        btnGenerarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarImagenActionPerformed(evt);
            }
        });

        jLabel3.setText("Ubicacion:");

        jLabel2.setText("Seleccione Imagen");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(btnGenerarImagen)
                            .addComponent(jComboUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jComboImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnMostrar)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(14, 14, 14)
                        .addComponent(jComboImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGenerarImagen)
                        .addGap(18, 18, 18)
                        .addComponent(btnMostrar)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        // TODO add your handling code here:
        try {
            File file = new File(this.pathImg);
            Image icono = ImageIO.read(file);
            jLabelImagen.setIcon(new ImageIcon(icono));
            jLabelImagen.updateUI();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al mostrar la imagen:\n" + ex.getMessage());
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btnGenerarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarImagenActionPerformed
        // TODO add your handling code here:
        String usuario = jComboUsuarios.getItemAt(jComboUsuarios.getSelectedIndex());
        String imagen = jComboImagenes.getItemAt(jComboImagenes.getSelectedIndex());
        this.graficarImagen(usuario,imagen);

    }//GEN-LAST:event_btnGenerarImagenActionPerformed

    private void jComboUsuariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboUsuariosItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboUsuariosItemStateChanged

    private void jComboUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboUsuariosActionPerformed
        // TODO add your handling code here:
        String usuario = jComboUsuarios.getItemAt(jComboUsuarios.getSelectedIndex());
        this.cargarImagenes(usuario);
    }//GEN-LAST:event_jComboUsuariosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarImagen;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JComboBox<String> jComboImagenes;
    private javax.swing.JComboBox<String> jComboUsuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelImagen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables

    private void graficarImagen(String user, String img) {
        GraficarImagen graficador = new GraficarImagen();
        generarDotFile gen = new generarDotFile();
        NodoArbol nodoAtmp = dataP.getUsuarios().buscarNodo(user);
        
        usuario userTmp = (usuario) nodoAtmp.getContenido();
        ListaDobleEnlazada listaImagenes = userTmp.getImagenes();
        
        Imagen imgSelected = (Imagen) listaImagenes.buscar(img).getContenido();
        
       if (imgSelected.getCapas().isEmpty()) {

            try {
                String code = "digraph imagen{\n"
                        + "    image[shape=none, margin=0,label=<\n"
                        + "    <TABLE BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"15\">\n"
                        + "       <TR>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "       </TR>\n"
                        + "       <TR>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"##000000\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "       </TR>\n"
                        + "       <TR>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "            <TD BGCOLOR=\"#FFFFFF\">   </TD>\n"
                        + "       </TR>\n"
                        + "    </TABLE>>];\n"
                        + "}";
                gen.generarArchivo(code, "imagenPredeterminada");
                pathImg = ejec.ejecutar("imagenPredeterminada" + ".dot", "imagenPredeterminada" + ".png");
                this.mostarPath();
                this.btnMostrar.setEnabled(true);

            } catch (IOException | NullDataException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            }

        } else {
            Nodo tmpNodo = imgSelected.getCapas().getRaiz();
            try {

                MatrizDispersa mt = ((Capa) tmpNodo.getContenido()).getContenido().obtenerCopia();
                Capa tmpCapa = null;
                while (tmpNodo != null) {
                    tmpCapa = (Capa) tmpNodo.getContenido();
                    mt.mergeMatriz(tmpCapa.getContenido());
                    tmpNodo = tmpNodo.getSiguiente();
                }

                String code = graficador.obtenerImagen(mt);
                gen.generarArchivo(code, "imagenPredeterminada");
                pathImg = ejec.ejecutar("imagenPredeterminada" + ".dot", "imagenPredeterminada" + ".png");
                this.mostarPath();
                this.btnMostrar.setEnabled(true);

            } catch (CloneNodeException | InvalidStructureException | InvalidIndexException | IOException | NullDataException ex) {
                JOptionPane.showMessageDialog(this, "Error al generar la imagen:\n" + ex.getMessage());
                this.btnMostrar.setEnabled(false);
            }
        }
    }

    private void cargarImagenes(String user) {
        NodoArbol nodoAtmp = dataP.getUsuarios().buscarNodo(user);
        usuario userTmp = (usuario) nodoAtmp.getContenido();

        this.jComboImagenes.removeAllItems();
        ListaDobleEnlazada listaImagenes = userTmp.getImagenes();

        if (listaImagenes.isEmpty()) {
            this.btnGenerarImagen.setEnabled(false);
            JOptionPane.showMessageDialog(this, "El usuario no tiene ninguna imagen asiganda\nno puede graficar imagenes con este usuario");
        } else {
            Nodo tmp = listaImagenes.getRaiz();
            Imagen imgTmp = null;
            while (tmp != null) {
                imgTmp = (Imagen) tmp.getContenido();
                this.jComboImagenes.addItem(imgTmp.getId());
                tmp = tmp.getSiguiente();
            }
            this.btnGenerarImagen.setEnabled(true);
        }

    }

    private void cargarComboUsuarios() {
        this.jComboUsuarios.removeAllItems();
        Object array[] = dataP.getUsuarios().AVLtoArrayInOrden();
        usuario tmp = null;
        for (Object object : array) {
            tmp = (usuario)object;
            this.jComboUsuarios.addItem(tmp.getUser());
        }
    }

    private void mostarPath() {
        this.jTextFieldPath.setText(this.pathImg);
        JOptionPane.showMessageDialog(this, "Se genero con exito la imagen, puede copiar la ruta\n"
                                      + "o mostrar la imagen en el programa precionando el boton \"Mostrar\"");
        jLabelImagen.setIcon(null);
        jLabelImagen.updateUI();
    }
}
